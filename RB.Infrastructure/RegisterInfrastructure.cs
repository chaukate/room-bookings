using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Identity.Web;
using Microsoft.IdentityModel.Tokens;
using RB.Application.Interfaces;
using RB.Infrastructure.Common;
using RB.Infrastructure.Persistence;
using System.Text;

namespace RB.Infrastructure
{
    public static class RegisterInfrastructure
    {
        private const string ADMIN_PORTAL_SCHEME_NAME = "AdminPortalBearer";
        private const string TOKEN_EXCHANGE_SCHEME_NAME = "AuthBearer";
        private const string CLIENT_PORTAL_SCHEME_NAME = "ClientPortalBearer";

        public static IServiceCollection AddInfrastrucutre(this IServiceCollection services,
                                                           IConfiguration configuration)
        {
            var adminSection = $"AzureAd:{AzureAdConfiguration.ADMIN_SECTION_NAME}";
            var clientSection = $"AzureAd:{AzureAdConfiguration.CLIENT_SECTION_NAME}";
            services.AddOptions();
            services.Configure<JwtConfiguration>(configuration.GetSection(JwtConfiguration.SECTION_NAME));
            services.Configure<AzureAdConfiguration>(AzureAdConfiguration.ADMIN_SECTION_NAME,
                                                     configuration.GetSection(adminSection));
            services.Configure<AzureAdConfiguration>(AzureAdConfiguration.CLIENT_SECTION_NAME,
                                                     configuration.GetSection(clientSection));

            services.AddCors(options =>
            {
                var section = configuration.GetSection(CorsConfiguration.SECTION_NAME);
                var corsConfig = new CorsConfiguration();
                section.Bind(corsConfig);

#if DEBUG
                options.AddDefaultPolicy(builder =>
                {
                    builder.WithOrigins(corsConfig.AllowedOrigins)
                           .AllowAnyMethod()
                           .AllowAnyHeader();
                });
#endif

                options.AddPolicy("ExposedHeader", builder =>
                {
                    builder.AllowAnyOrigin()
                           .WithMethods("GET")
                           .AllowAnyHeader()
                           .WithExposedHeaders(corsConfig.ExposedHeaders);
                });

                options.AddPolicy("PublicAccess", builder =>
                {
                    builder.AllowAnyOrigin()
                           .AllowAnyMethod()
                           .AllowAnyHeader();
                });
            });

            services.AddDbContext<IRBDbContext, RBDbContext>(options =>
            {
                options.UseSqlServer(configuration.GetConnectionString("RoomBooking"));
            });

            // Microsoft Federated Authentication - Admin Portal
            services.AddAuthentication(ADMIN_PORTAL_SCHEME_NAME)
                .AddMicrosoftIdentityWebApi(configuration, $"AzureAd:{AzureAdConfiguration.ADMIN_SECTION_NAME}", ADMIN_PORTAL_SCHEME_NAME)
                .EnableTokenAcquisitionToCallDownstreamApi()
                .AddMicrosoftGraph(configuration.GetSection("Graph"))
                .AddInMemoryTokenCaches();

            //Microsoft Federated Authentication any organization - Token Exchange
            services.AddAuthentication()
                .AddMicrosoftIdentityWebApi(configuration, $"AzureAd:{AzureAdConfiguration.CLIENT_SECTION_NAME}", TOKEN_EXCHANGE_SCHEME_NAME);

            // JWT generated by this application.
            services.AddAuthentication()
                .AddJwtBearer(CLIENT_PORTAL_SCHEME_NAME, options =>
                {
                    options.SaveToken = true;
                    options.RequireHttpsMetadata = false;
                    options.TokenValidationParameters = new TokenValidationParameters()
                    {
                        ValidateIssuer = true,
                        ValidateAudience = true,
                        ValidateLifetime = true,
                        ValidAudience = configuration["JWT:Audience"],
                        ValidIssuer = configuration["JWT:Issuer"],
                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["JWT:Key"])),
                        ClockSkew = TimeSpan.Zero
                    };
                });

            services.AddAuthorization(options =>
            {
                options.AddPolicy("Exchange Endpoint", policy =>
                {
                    policy.AddAuthenticationSchemes(TOKEN_EXCHANGE_SCHEME_NAME);
                    policy.RequireAuthenticatedUser();
                });
                options.AddPolicy("Client Portal Endpoint", policy =>
                {
                    policy.AddAuthenticationSchemes(CLIENT_PORTAL_SCHEME_NAME);
                    policy.RequireAuthenticatedUser();
                });
                options.AddPolicy("Admin Portal Endpoint", policy =>
                {
                    var aplTenantId = configuration[$"AzureAd:{AzureAdConfiguration.ADMIN_SECTION_NAME}:TenantId"];
                    policy.AddAuthenticationSchemes(ADMIN_PORTAL_SCHEME_NAME);
                    policy.RequireAuthenticatedUser();
                    policy.RequireAssertion(context =>
                    {
                        var userTenantId = context.User.Claims.FirstOrDefault(c => c.Type == ClaimConstants.TenantId)?.Value;
                        var isValidTenant = (userTenantId == aplTenantId);
                        return isValidTenant;
                    });
                });
            });

            return services;
        }
    }
}
